{"meta":{"title":"False","subtitle":" ","description":"","author":"False","url":"http://blog.falsectf.top","root":"/"},"pages":[{"title":"about","date":"2020-02-27T02:51:15.000Z","updated":"2020-02-27T02:51:25.329Z","comments":true,"path":"about/index.html","permalink":"http://blog.falsectf.top/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-02-27T02:49:46.000Z","updated":"2020-04-29T13:57:12.842Z","comments":true,"path":"categories/index.html","permalink":"http://blog.falsectf.top/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2020-02-27T02:51:38.000Z","updated":"2020-02-27T02:51:46.255Z","comments":true,"path":"contact/index.html","permalink":"http://blog.falsectf.top/contact/index.html","excerpt":"","text":""},{"title":"friends","date":"2020-02-27T04:25:38.000Z","updated":"2020-02-27T04:25:48.287Z","comments":true,"path":"friends/index.html","permalink":"http://blog.falsectf.top/friends/index.html","excerpt":"","text":""},{"title":"MISC-内存取证","date":"2020-03-01T10:41:14.000Z","updated":"2020-04-30T16:01:26.352Z","comments":true,"path":"hide/MISC-内存取证.html","permalink":"http://blog.falsectf.top/hide/MISC-%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81.html","excerpt":"","text":"使用工具：Dumpit.exe一款内存内置提取工具。 TrueCrypt.exe一款磁盘加密工具。 Notepad.exe Windows自带的记事本。 Mspaint，exe Windows自带画图工具。 基础命令 命令 功能 cmdline / cmdscan 列出历史cmd命令 filescan 扫描文件,可配合grep使用 netscan 扫描建立的连接和套接字，类似于netstat pslist/psscan 列出进程列表 svcscan 扫描windows服务列表 screenshot 显示GDI样式的截屏 memdump 从内存dump进程的内存 dumpfiles 从内存dump文件 iehistory / yarascan 查看ie浏览记录 notepad / editbox 查看记事本内容 上述命令中存在部分操作系统不支持的情况，所以可以选择其他类似功能命令代替当某些命令基于当前文件的操作系统无法使用时，何以使用–help命令查询所有可用命令在WinXP中可以使用notepad命令 基本流程1.获取文件信息首先，会使用命令 volatility -f &lt;filename&gt; imageinfo 查看文件的信息2.信息收集获取到目标文件的操作系统后，进行第二步，信息收集常用命令列在了上表中这里使用了 pslist 命令 查看所有的进程，通常notepad、TryeCrypte等会比较可疑3.文件导出导出进程内存文件 volatility -f &lt;filename&gt; --profile=Winxxxxx memdump -p &lt;PID号&gt; --dump-dir ./导出偏移内存文件 volatility -f &lt;filename&gt; --profile=Winxxxxx dumpfiles -Q &lt;0x偏移&gt; --dump-dir ./查看系统进程 volatility -f &lt;filename&gt; --profile=Winxxxxx pslist搜索指定类型的文件volatility -f mem.raw --profile=Win7SP1x86 filescan|grep -v Temporary |grep -v .dll|grep -E &#39;png|jpg|gif|zip|rar|7z|pdf&#39; 查看记事本内容 volatility -f &lt;filename&gt; --profile=Winxxxxx editbox之后就是一些解密之类的操作了，在下方有一些完整的解题过程链接 夏风师傅的完全解题过程：https://blog.xiafeng2333.top/ctf-25/TrueCrypy.exe工具的使用：https://www.jianshu.com/p/6438bc3302c8Gimp的使用：https://segmentfault.com/a/1190000018813033volatility命令手册：https://github.com/volatilityfoundation/volatility/wiki/Command-ReferenceVN-内存取证：https://zhuanlan.zhihu.com/p/110104787"},{"title":"tags","date":"2020-02-27T02:50:48.000Z","updated":"2020-02-27T02:51:05.077Z","comments":true,"path":"tags/index.html","permalink":"http://blog.falsectf.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"安恒杯2020-4月月赛-misc","slug":"安恒杯2020-4月月赛-misc","date":"2020-04-25T12:41:14.000Z","updated":"2020-05-01T23:44:24.479Z","comments":true,"path":"page/d10f.html","link":"","permalink":"http://blog.falsectf.top/page/d10f.html","excerpt":"","text":"MISC1-Blueshark难度：简单题目描述：Can you dig something you want out from the sea-colored beautiful shark?题目附件：blueshark.pcapng解题思路：1、打开题目后，发现是一个蓝牙协议的流量看不出什么东西，直接binwalk分析一下，发现存在一个7-zip文件2、提取压缩包找到7z文件，找到对应的数据，将其提取出来找到对应的数据，直接导出分组字节流，存储为xx.7z或xx.zip3、打开文件需要密码，说是PIN码，直接在数据包里搜索密码是141854解密压缩包后得到flag MISC2-Keyboard参考Fzwjscj师傅的wp：http://www.fzwjscj.xyz/index.php/archives/25/#misc3参考Ga1@xy师傅的wp：http://www.ga1axy.top/index.php/archives/28/#keyboard MISC3-AWDshell难度：困难题目描述：AWDshell题目附件：awdshell.pcapng解题思路：1、打开流量包后发现大部分都是UDP流量，往下看看会发现存在一些http流量因为是awdshell，awd肯定是web或者pwn，那么分析一定就是http了，过滤一下这里可以发现访问了upload.php，说明存在文件上传漏洞，追一下http流找到了上传的php木马，这里是rsa加密流量木马请求加密数据返回加密数据2、解密流量，进行分析发送的流量是rsa加密的，返回流量看起来像base64加密，还不清楚下方是解密脚本，因为发送的是rsa加密流量，根据rsa公钥解密可以获得密文 &lt;?php $cmd = '';//密文 $pk = &lt;&lt;&lt;EOF -----BEGIN PUBLIC KEY----- MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCmXoXBvXeanxgl51HBm2J6HPNh TQtfb8ICioE+n0Ni0DlBFHSBprbsWYKJywVfdhJbLDCCon68uA1UYuy0yteDog3j OdweW2bscEGmeMXLQJfBHpQrg4wWoYJjD3QsKorYT6kdp1LRkuHE3PbpqvRtqO7A LzrcBi88Eu7oZaPANwIDAQAB -----END PUBLIC KEY----- EOF; $cmds = explode(\"|\", $cmd); $pk = openssl_pkey_get_public($pk); $cmd = ''; foreach ($cmds as $value) { if (openssl_public_decrypt(base64_decode($value), $de, $pk)) { $cmd .= $de; } } echo $cmd; 经过逐条查找后发现flag相关的流量在这里，直接对它进行分析即可3、解密流量，获取flag这是该条流量解密后的流量数据，是一个php脚本格式美化：http://www.jsons.cn/phpformat/格式化后分析一下脚本，发现返回流量是AES加密，头尾会增加垃圾字符获取返回流量，去除头尾垃圾字符 +L8pc9pJEhqPQ1cmL18eJXX9QGADkKnp8A1j7s4oX2Qo8YJNGNTbuaXu+OfynYgRewqyfLj/Wrg0rgKj/cRdO4zJMmfLfyFVB4pBRYeTetM0G/w/Px6+xI/WPlRrx/+MvK6eQyPr+xDqTX82AqiGrOYDwN94/vuGcLS7NAxhty4=session前16位：hm3pq66843bbbrdg AES在线解密链接：http://tool.chacuo.net/cryptaes在线对数据进行解密，即可拿到flag返回结果是base64，在进行一次base64解密对数据进行两次base64解密即可拿到flag MISC4-（签到题）6G还远吗？难度：入门题目描述：5G都来了，6G还远吗？6G下还需要开会员才能高速下载吗？解题思路：就如同题目的描述一样，你需要冲会员才能下载这道题目根本就没打算要你下载下来近一个G的文件，flag藏在了文件头部点击下载后直接记事本查看头部就可以看到flag了 MISC5-4月月赛题目质量问卷调查难度：入门题目描述：送分题XD给了一个链接，是一个调查问卷，进去直接填好后提交就给flag","categories":[{"name":"CTF","slug":"CTF","permalink":"http://blog.falsectf.top/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://blog.falsectf.top/tags/CTF/"},{"name":"安恒杯","slug":"安恒杯","permalink":"http://blog.falsectf.top/tags/%E5%AE%89%E6%81%92%E6%9D%AF/"},{"name":"MISC","slug":"MISC","permalink":"http://blog.falsectf.top/tags/MISC/"}]},{"title":"Burpsuite插件","slug":"Burpsuite","date":"2020-04-22T02:25:38.000Z","updated":"2020-04-29T12:48:00.577Z","comments":true,"path":"page/7f9e.html","link":"","permalink":"http://blog.falsectf.top/page/7f9e.html","excerpt":"","text":"Reissue Request Scripter插件官方链接：https://github.com/PortSwigger/reissue-request-scripter 下载链接：https://github.com/h3xstream/http-script-generator/blob/gh-pages/releases/burp/scriptgen-burp-plugin-6.jar?raw=true 功能：可以根据抓取的包自动解析生成各类语言的脚本，非常适合用于AWD比赛一类，省去了脚本框架编写的步骤。 安装：下载到本地后是一个.jar的包，需要先打开Burpsuite，然后点击Extender安装插件，详情见下图 到了这里，我们就已经安装好了，接下来演示如何使用 这里可以选择各类语言的脚本，均可自动生成 将生成的脚本copy到对应的运行环境就可以运行辣！！！ 下方是Python3脚本运行结果 总结：这个插件是正在工作中的同学推荐的 感觉是个非常好的插件了，对于AWD比赛中快速编辑批量脚本有很大的帮助，另外没有学习过或者不会写脚本的小伙伴也可以去学习自动生成的脚本，根据其意思学会自己编写脚本。","categories":[{"name":"Tools","slug":"Tools","permalink":"http://blog.falsectf.top/categories/Tools/"}],"tags":[{"name":"Burpsuite","slug":"Burpsuite","permalink":"http://blog.falsectf.top/tags/Burpsuite/"},{"name":"Tools","slug":"Tools","permalink":"http://blog.falsectf.top/tags/Tools/"}]},{"title":"USB协议流量分析","slug":"USB协议流量分析","date":"2020-04-15T12:53:30.000Z","updated":"2020-04-30T15:49:56.705Z","comments":true,"path":"page/9593.html","link":"","permalink":"http://blog.falsectf.top/page/9593.html","excerpt":"","text":"使用工具：WiresharkPython USB键盘流量这里讲一讲键盘流量的一个分析原理，暂且不做例题讲解 区分：键盘流量的变化体现在Leftover Capture Data的8组数据中的第三组 首先，我们知道可以通过Wireshark工具抓取外接键盘的数据流量。 那么是如何知道输入了哪些数据的呢？其实有一张键位对照的表格，只要对着表格替换就是键入数据啦。 下方是一个比较好用的能够区分大小写的脚本，上面的字典内容就是按照键位对照表生成的。 我们来举个例子，Leftover Capture Data：00002c0000000000 可以看到上面数据共16个字符，2个字符一组分为8组 00:00:2c:00:00:00:00:00 可以清晰的看到第三组的数据为击键信息：2c，那么它对应的按键就是 可以在下方字典中找到 那么为什么可以说下方的脚本可以区分大小写输出键入内容呢？ 原理：当Leftover Capture Data：02002c0000000000 第一组数据第二位为2时，即为大写内容 #python3 normalKeys = { \"04\":\"a\", \"05\":\"b\", \"06\":\"c\", \"07\":\"d\", \"08\":\"e\", \"09\":\"f\", \"0a\":\"g\", \"0b\":\"h\", \"0c\":\"i\", \"0d\":\"j\", \"0e\":\"k\", \"0f\":\"l\", \"10\":\"m\", \"11\":\"n\", \"12\":\"o\", \"13\":\"p\", \"14\":\"q\", \"15\":\"r\", \"16\":\"s\", \"17\":\"t\", \"18\":\"u\", \"19\":\"v\", \"1a\":\"w\", \"1b\":\"x\", \"1c\":\"y\", \"1d\":\"z\",\"1e\":\"1\", \"1f\":\"2\", \"20\":\"3\", \"21\":\"4\", \"22\":\"5\", \"23\":\"6\",\"24\":\"7\",\"25\":\"8\",\"26\":\"9\", \"27\":\"0\",\"28\":\"&lt;RET>\",\"29\":\"&lt;ESC>\",\"2a\":\"&lt;DEL>\", \"2b\":\"\\t\", \"2c\":\"&lt;SPACE>\",\"2d\":\"-\",\"2e\":\"=\",\"2f\":\"[\",\"30\":\"]\",\"31\":\"\\\\\", \"32\":\"&lt;NON>\",\"33\":\";\",\"34\":\"'\",\"35\":\"&lt;GA>\",\"36\":\",\",\"37\":\".\", \"38\":\"/\",\"39\":\"&lt;CAP>\",\"3a\":\"&lt;F1>\",\"3b\":\"&lt;F2>\", \"3c\":\"&lt;F3>\",\"3d\":\"&lt;F4>\", \"3e\":\"&lt;F5>\",\"3f\":\"&lt;F6>\",\"40\":\"&lt;F7>\",\"41\":\"&lt;F8>\",\"42\":\"&lt;F9>\",\"43\":\"&lt;F10>\", \"44\":\"&lt;F11>\",\"45\":\"&lt;F12>\"} shiftKeys = { \"04\":\"A\", \"05\":\"B\", \"06\":\"C\", \"07\":\"D\", \"08\":\"E\", \"09\":\"F\", \"0a\":\"G\", \"0b\":\"H\", \"0c\":\"I\", \"0d\":\"J\", \"0e\":\"K\", \"0f\":\"L\", \"10\":\"M\", \"11\":\"N\", \"12\":\"O\", \"13\":\"P\", \"14\":\"Q\", \"15\":\"R\", \"16\":\"S\", \"17\":\"T\", \"18\":\"U\", \"19\":\"V\", \"1a\":\"W\", \"1b\":\"X\", \"1c\":\"Y\", \"1d\":\"Z\",\"1e\":\"!\", \"1f\":\"@\", \"20\":\"#\", \"21\":\"$\", \"22\":\"%\", \"23\":\"^\",\"24\":\"&amp;\",\"25\":\"*\",\"26\":\"(\",\"27\":\")\", \"28\":\"&lt;RET>\",\"29\":\"&lt;ESC>\",\"2a\":\"&lt;DEL>\", \"2b\":\"\\t\",\"2c\":\"&lt;SPACE>\", \"2d\":\"_\",\"2e\":\"+\",\"2f\":\"{\",\"30\":\"}\",\"31\":\"|\",\"32\":\"&lt;NON>\",\"33\":\"\\\"\", \"34\":\":\",\"35\":\"&lt;GA>\",\"36\":\"&lt;\",\"37\":\">\",\"38\":\"?\",\"39\":\"&lt;CAP>\",\"3a\":\"&lt;F1>\", \"3b\":\"&lt;F2>\", \"3c\":\"&lt;F3>\",\"3d\":\"&lt;F4>\",\"3e\":\"&lt;F5>\",\"3f\":\"&lt;F6>\",\"40\":\"&lt;F7>\", \"41\":\"&lt;F8>\",\"42\":\"&lt;F9>\",\"43\":\"&lt;F10>\",\"44\":\"&lt;F11>\",\"45\":\"&lt;F12>\"} output = [] keys = open('xxx.txt') for line in keys: try: if line[0]!='0' or (line[1]!='0' and line[1]!='2') or line[3]!='0' or line[4]!='0' or line[9]!='0' or line[10]!='0' or line[12]!='0' or line[13]!='0' or line[15]!='0' or line[16]!='0' or line[18]!='0' or line[19]!='0' or line[21]!='0' or line[22]!='0' or line[6:8]==\"00\": continue if line[6:8] in normalKeys.keys(): output += [[normalKeys[line[6:8]]],[shiftKeys[line[6:8]]]][line[1]=='2'] else: output += ['[unknown]'] except: pass keys.close() flag=0 #print(\"\".join(output)) for i in range(len(output)): try: a=output.index('&lt;DEL>') del output[a] del output[a-1] except: pass for i in range(len(output)): try: if output[i]==\"&lt;CAP>\": flag+=1 output.pop(i) if flag==2: flag=0 if flag!=0: output[i]=output[i].upper() except: pass print ('output :' + \"\".join(output)) 上方是键盘流量的解题脚本，下方说一下ctf中解题步奏 1、打开流量包，分析出键盘和鼠标流量类型 2、使用tshark数据进行提起tshark -r xxx.pcapng -T fields -e usb.capdata &gt;xxx.txt 3、提取后运行上方脚本即可得到键盘输入的内容","categories":[{"name":"MISC","slug":"MISC","permalink":"http://blog.falsectf.top/categories/MISC/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://blog.falsectf.top/tags/CTF/"},{"name":"流量分析","slug":"流量分析","permalink":"http://blog.falsectf.top/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"}]},{"title":"MISC-刷题记录","slug":"MISC-刷题记录","date":"2020-03-01T03:14:00.000Z","updated":"2020-05-02T06:18:44.060Z","comments":true,"path":"page/eb9d.html","link":"","permalink":"http://blog.falsectf.top/page/eb9d.html","excerpt":"","text":"1、nmapll.pcapng流量分析附件下载链接：https://pan.baidu.com/s/1vPnPVPKkQltwbnUp5MzNig 提取码：hgar 题目描述 在参加网络安全大赛第二届世界巡回赛新加坡站一场与SP战队的比赛时， 作为K&amp;K战队主防手的你使用经典的“三条命令”检查端口封闭状况。 可是这次比赛平台没有回显，你能查出来有哪些端口是开放的嘛？ 请将开放端口按由小到大顺序写入flag中 如：开放1、22、234端口，flag{122234}根据题目的描述，这是出自《亲爱的，热爱的》电视剧中的一段故事，其中有效信息如下图根据上图我们可以看到这是对自己进行了扫描，使用了 -sT -A参数参考链接：https://www.cocosec.com/archives/114.html由上图可以得知在进行TCP完全链接扫描时，会进行三次握手，而握手成功的标识就是返回SYN与ACK包由此我们可以在wireshark中构造过滤条件，选出符合条件的数据包过滤语句：tcp.flags.ack == 1 and tcp.flags.syn == 1 经过观察可以得到flag{21226318013306} 2、De1CTF-Misc杂烩/Misc Chowder以下链接失效可以qq联系我重新挂上，如有题目附件侵权联系我删除原始附件链接：https://drive.google.com/file/d/1-SrQ8JbD8zAQNVlvuwu3T2Lbu_o1knRQ/view?usp=sharing网盘附件链接：链接：https://pan.baidu.com/s/1tyxvn-CSq6QJqZGyJWnqVA 提取码：tt73 侵删 hint1：流量包中的网络连接对解题没有帮助不需要访问流量里任何一个的服务器地址，所有数据都可以从流量包里直接提取压缩包密码暴破考点中，密码的长度为6位，前两位为DE。 首先，下载题目附件后发现是一个pcap文件，wireshark打开分析有很多的无用流量，过滤http协议,upload字符，后发现一个upload操作，这里主要是png图片有用选中这条流量，将png图片导出之后打开这个png图片，发现是一个链接原链接应该失效了，这里我放到网盘了：链接：https://pan.baidu.com/s/1vFSL61DHItX9gmBR8xUH8g 提取码：rk0o 侵删下载下来后是一个readme.docx文件这里我打开docx会报错，所以我直接改后缀为zip了，然后解压，发现了另一个zip文件但是这个zip有密码，根据题目的提示，需要爆破，这里掩码爆破最后爆破了20多分钟得到密码：DE34Q1将You_found_me_Orz.zip解压后是一个jpg的图片，binwalk分离出一个Rar文件Rar解压后发现3个文件，flag.txt是假flag，666.png也没有有效信息无lsb隐写最后想到了NTFS隐写，dir /r发现果然是NTFS，notepad读一下，获得flagemmmm 大杂烩 大套娃！！！","categories":[{"name":"CTF","slug":"CTF","permalink":"http://blog.falsectf.top/categories/CTF/"},{"name":"MISC","slug":"CTF/MISC","permalink":"http://blog.falsectf.top/categories/CTF/MISC/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://blog.falsectf.top/tags/CTF/"},{"name":"MISC","slug":"MISC","permalink":"http://blog.falsectf.top/tags/MISC/"}]},{"title":"WEB-刷题记录","slug":"WEB-刷题记录","date":"2020-02-28T12:19:44.000Z","updated":"2020-04-29T13:33:23.222Z","comments":true,"path":"page/cb27.html","link":"","permalink":"http://blog.falsectf.top/page/cb27.html","excerpt":"","text":"WEB1-HCTF2018-WEBversion：4.8.1 文件包含漏洞 https://xz.aliyun.com/t/5534#toc-3该漏洞cve编号为CVE-2018-12613 http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12613 &lt;?php highlight_file(__FILE__); class emmm { public static function checkFile(&amp;$page) { $whitelist = [\"source\"=>\"source.php\",\"hint\"=>\"hint.php\"]; if (! isset($page) || !is_string($page)) { echo \"you can't see it\"; return false; } if (in_array($page, $whitelist)) { return true; } $_page = mb_substr( $page, 0, mb_strpos($page . '?', '?') ); if (in_array($_page, $whitelist)) { return true; } $_page = urldecode($page); $_page = mb_substr( $_page, 0, mb_strpos($_page . '?', '?') ); if (in_array($_page, $whitelist)) { return true; } echo \"you can't see it\"; return false; } } if (! empty($_REQUEST['file']) &amp;&amp; is_string($_REQUEST['file']) &amp;&amp; emmm::checkFile($_REQUEST['file']) ) { include $_REQUEST['file']; exit; } else { echo \"&lt;br>&lt;img src=\\\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\\" />\"; } ?> 这是一道php代码审计的题目，其中hint.php 内容为： ffffllllaaaagggg 进行代码审计，发现下方传入的file参数必须是字符串类型，然后传入checkFile()方法 if (! empty($_REQUEST['file']) &amp;&amp; is_string($_REQUEST['file']) &amp;&amp; emmm::checkFile($_REQUEST['file']) ) checkFile()方法分析 if (! isset($page) || !is_string($page)) //file值不能为空，且必须是字符串 if (in_array($page, $whitelist)) //必须再白名单中即 source.php 和 hint.php $_page = mb_substr( //截取传入参入 ? 之前的字符 $page, 0, mb_strpos($page . '?', '?') ); $_page = urldecode($page); //对传入的参数进行一次url解码 可见，file参数需要满足以下几点有三个if语句可以返回true，第二个语句直接判断$page，不可用第三个语句截取’?’前部分，由于?被后部分被解析为get方式提交的参数，也不可利用第四个if语句中，先进行url解码再截取，因此我们可以将?经过两次url编码，在服务器端提取参数时解码一次，checkFile函数中解码一次，仍会解码为’?’，仍可通过第四个if语句校验。（’?’两次编码值为’%253f’）,构造url：由此，我们可以构造payload：?source.php%253f../../../../../ffffllllaaaagggg","categories":[{"name":"Web","slug":"Web","permalink":"http://blog.falsectf.top/categories/Web/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://blog.falsectf.top/tags/CTF/"},{"name":"Web","slug":"Web","permalink":"http://blog.falsectf.top/tags/Web/"}]},{"title":"安恒杯2020-02月赛","slug":"安恒杯2020-02","date":"2020-02-28T06:19:04.000Z","updated":"2020-04-29T13:35:49.521Z","comments":true,"path":"page/d624.html","link":"","permalink":"http://blog.falsectf.top/page/d624.html","excerpt":"","text":"WebReverse第一次做逆序题，这次是一道简单的py逆向题用来练习练习题目附件是一个pyc文件，可以使用uncompyle6反编译为py文件uncompyle6链接：https://github.com/rocky/python-uncompyle6 import base64, string def caser(flag): enc1 = '' for i in flag: enc1 += chr(ord(i) - 5) return enc1 def rail(flag): p1 = p2 = p3 = enc2 = '' for i in range(len(flag)): j = i % 3 if j == 0: p1 += flag[i] elif j == 1: p2 += flag[i] else: p3 += flag[i] enc2 = p1 + p2 + p3 return enc2 def rep(flag): table1 = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM' table2 = 'QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm' table = string.maketrans(table1, table2) return flag.translate(table, '=') while True: flag = raw_input('please input flag to check:') if rep(base64.b64encode(rail(caser(flag)))) == 'ywjCytmRxI9CycWZngD2ncTDkZqYlJrGmhHCxISUnfWSlgfDlJi': print 'Success!you got it!' break else: print 'try a gain' 如果是汇编的逆向我就不会了 但是py的还是可以搞一搞的 这是一个比较简单的算法，如果不会写脚本用手也可以算出来加密1、flag先逐位进行ascii值-5再转化为ascii码的操作 caser()函数2、对flag每三位一循环的依次截取3、对上述结果进行了base64加密4、对base64加密结果大小写进行转换，并且删除了= 这个算法，只要我们输入的数==’ywjCytmRxI9CycWZngD2ncTDkZqYlJrGmhHCxISUnfWSlgfDlJi’就可以拿到flag 解密1、原函数照抄，rep()函数进行大小写转换2、进行base64解密，注意要加上’=’ 否则可能会报错 在线解密应该可以解出来3、rail()函数是最麻烦的一个 分析后发现p1、p2、p3分别截取了13、13、12位字符串，将其取出来并逐个进行拼接4、将拼接结果逐位进行ascii值+5并转换位ascii码-得到flag #!/usr/bin/env python # -*- coding: utf-8 -*- import base64,string def rep(flag): #替换大小写 table1 = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM' table2 = 'QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm' table = str.maketrans(table1, table2) return flag.translate(table) def deflag(flag): #解密flag flag_str=\"\" for i in flag: flag_str += chr(ord(i)+5) return flag_str def p1_p2_p3(enc): #解密p1,p2,p3 p1 = str(enc[0:13]).replace(\"b'\",\"\").replace(\"'\",\"\").replace(\"\\\\\\\\\",\"\\\\\") #切片后会输入 b'xxxx' 所以删掉了b'' 其中会有\\\\的转义字符，只需要一个即可 p2 = str(enc[13:26]).replace(\"b'\",\"\").replace(\"'\",\"\").replace(\"\\\\\\\\\",\"\\\\\") p3 = str(enc[26:]).replace(\"b'\",\"\").replace(\"'\",\"\").replace(\"\\\\\\\\\",\"\\\\\")+\" \" de_str=\"\" for i in range(0,13): de_str +=p1[i]+p2[i]+p3[i] #将每一段的第一个字符依次拼接 即i%3==0 ==1 ==2,3 ... return de_str base_str=rep('ywjCytmRxI9CycWZngD2ncTDkZqYlJrGmhHCxISUnfWSlgfDlJi')+\"=\" #大小写替换 debase_str = base64.b64decode(base_str) #base64解密 print(deflag(p1_p2_p3(debase_str))) #flag{ca90f038b900ac91471a3fe9b1e38579}","categories":[{"name":"CTF","slug":"CTF","permalink":"http://blog.falsectf.top/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://blog.falsectf.top/tags/CTF/"},{"name":"安恒杯","slug":"安恒杯","permalink":"http://blog.falsectf.top/tags/%E5%AE%89%E6%81%92%E6%9D%AF/"}]},{"title":"Hexo搭建-matery主题","slug":"Hexo","date":"2020-02-28T04:33:59.000Z","updated":"2020-04-29T13:20:58.570Z","comments":true,"path":"page/8dc0.html","link":"","permalink":"http://blog.falsectf.top/page/8dc0.html","excerpt":"","text":"1、前期准备1.安装Gitwindwows：https://gitforwindows.org/linux ：sudo apt-get install git 2.安装nodejswindwos：https://nodejs.org/en/download/linux：如下 sudo apt-get install nodejs sudo apt-get install npm 安装完成后，打开命令行检查，windwos也相同 node -v npm -v3.安装Hexo 在安装之前先安装一下淘宝镜像源，不然可能会后续出现因为网络问题报错命令：npm install -g cnpm --registry=https://registry.npm.taobao.org然后在任意位置创建例如：Blog文件夹，然后右键打开安装好的Git Bash Here安装Hexo命令：cnpm install -g hexo-cli检测是否安装 ：hexo -v初始化博客 ：hexo init启动博客 ：hexo s此时，打开http://localhost:4000 即可访问到hexo 2、连接Github1.打开https://github.com/ 注册一个账户2.创建一个与你用户名相同的仓库，整体为：用户名.github.io ，只有这样才会被Github page识别3.生成SSH添加到Github 本地Git Bash Here中执行 git config --global user.name &quot;yourname&quot; git config --global user.email &quot;youremail&quot; 检查输入的用户名和邮箱是否有错误 git config user.name git config user.email 创建SSH密钥 ssh-keygen -t rsa -C &quot;youremail&quot;此时会生成id_rsa.pub文件，将内容复制到github中，添加ssh密钥 https://github.com/settings/keys4.测试是否连接github成功：ssh -T git@github.com打开博客根目录的_config.yml文件 deploy: type: git repo: git@github.com:仓库名.github.io.git 推荐直接复制自己的仓库名 branch: master3、部署hexo到Github进到之前创建好的Blog目录下，打开git bash here 执行cnpm install --save hexo-deployer-git 清除缓存 hexo clean 生成静态文章 hexo generate 缩写 hexo g 部署文章到Github hexo deploy 缩写：hexo d此时，访问仓库名.github.io应该就可以访问到博客啦 4、更换主题下载hexo-theme-matery主题git clone https://github.com/blinkfox/hexo-theme-matery.git修改根目录下的_config.yml # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: hexo-theme-matery #根据下载后的主题名来写1.新建分类categories页：hexo new page &quot;categories&quot;编辑你刚刚新建的页面文件 /source/categories/index.md --- title: categories date: 2018-09-30 17:25:30 type: &quot;categories&quot; layout: &quot;categories&quot; ---2.新建标签 tags 页：hexo new page &quot;tags&quot;编辑你刚刚新建的页面文件 /source/tags/index.md --- title: tags date: 2018-09-30 18:23:38 type: &quot;tags&quot; layout: &quot;tags&quot; ---3.新建关于我 about 页：hexo new page &quot;about&quot;编辑你刚刚新建的页面文件 /source/about/index.md --- title: about date: 2018-09-30 17:25:30 type: &quot;about&quot; layout: &quot;about&quot; ---4.新建友情连接 friends 页（可选的）hexo new page &quot;friends&quot;编辑你刚刚新建的页面文件 /source/friends/index.md --- title: friends date: 2018-12-12 21:25:30 type: &quot;friends&quot; layout: &quot;friends&quot; ---同时，在source目录下创建_data目录，在_data目录下新建friends.json文件 文件内容格式： [{ &quot;avatar&quot;: &quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;, &quot;name&quot;: &quot;码酱&quot;, &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;, &quot;url&quot;: &quot;http://luokangyuan.com/&quot;, &quot;title&quot;: &quot;前去学习&quot; }, { &quot;avatar&quot;: &quot;http://image.luokangyuan.com/4027734.jpeg&quot;, &quot;name&quot;: &quot;闪烁之狐&quot;, &quot;introduction&quot;: &quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;, &quot;url&quot;: &quot;https://blinkfox.github.io/&quot;, &quot;title&quot;: &quot;前去学习&quot; }, { &quot;avatar&quot;: &quot;http://image.luokangyuan.com/avatar.jpg&quot;, &quot;name&quot;: &quot;ja_rome&quot;, &quot;introduction&quot;: &quot;平凡的脚步也可以走出伟大的行程&quot;, &quot;url&quot;: &quot;ttps://me.csdn.net/jlh912008548&quot;, &quot;title&quot;: &quot;前去学习&quot; }]关于后续的一些主题修改这位师傅写的比较详细：https://purethought.cn/c308959f.htmlmastery主题搭建及优化：https://segmentfault.com/a/1190000021923137#item-6-32_config.yml文件讲解：https://hexo.io/zh-cn/docs/configuration","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://blog.falsectf.top/tags/Hexo/"}]}]}